@using FitnessProgram.Data
@using FitnessProgram.Data.Models
@using FitnessProgram.Infrastructure
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@model PostDetailsModel

@{
    ViewBag.Title = "Post Details";
    ViewBag.IsCreator = true;
}

@if (!SignInManager.IsSignedIn(User) || Model.Creator.Id != User.GetId())
{
    ViewBag.IsCreator = false;
}

@section Styles{
    <link rel="stylesheet" href="~/css/PostDetail.css" />
}


    <div class="section">
        <div class="color-overlay"></div>
        <div class="container my-5 py-5">
            <div class="row d-flex justify-content-center">
                <div class="col-sm-12 col-md-12 col-lg-10 offset-lg-1 col-xl-8 offset-xl-2">
                    <div class="card custom-container">
                        <div class="card-body">
                            <div class="d-flex flex-start align-items-center">
                                <img class="rounded-circle shadow-1-strong me-3"
                                 src="@Model.Creator.ProfilePicture" alt="avatar" width="60"
                                 height="60" />
                                <div>
                                    <h6 class="fw-bold text-primary mb-1 text-light">@Model.Creator.Username</h6>
                                    <p class="small mb-0 text-light">
                                        Posted on - @Model.CreatedOn
                                    </p>
                                </div>
                                @if (ViewBag.IsCreator == true)
                            {
                                <div class="dropdown">
                                    <button class="dropbtn">...</button>
                                    <div class="dropdown-content">
                                        <a asp-controller="Posts" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                                        <a asp-controller="Posts" asp-action="Delete" asp-route-id="@Model.Id">Delete</a>
                                    </div>
                                </div>
                            }

                        </div>

                        <p class="mt-3 mb-4 pb-2 text-center">
                            <img class=""
                                 src="@Model.ImageUrl" alt="avatar" width="250" height="200" style="border-radius: 15px" />
                        </p>
                        <p class="mt-3 mb-4 pb-2 text-light">
                            @Model.Text
                        </p>

                        <div class="small d-flex justify-content-start">
                            <div class="d-flex align-items-center me-3 text-decoration-none">
                                <i id="likes-count" class="far fa-thumbs-up me-2 text-light">@Model.LikesCount</i>
                                <button id="like-btn" onclick="Like()" class="mb-0 text-light">@(Model.IsCurrUserLikedPost == true?"Liked":"Like")</button>
                            </div>
                            <div class="d-flex align-items-center me-3 text-decoration-none">
                                <i id="comments-count" class="far fa-comment-dots me-2 text-light">@Model.Comments.Count()</i>
                                <p class="mb-0 text-light">Comments</p>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        @if (Model.Comments.Count() == 0)
                        {
                            <div id="no-comments">
                                <p class="text-center text-light">There is no comments for this post</p>
                                <p class="text-center text-light">Be the first who comment</p>
                            </div>
                        }
                        else
                        {
                            <div class="comments-section">
                                @foreach (var comment in Model.Comments)
                                {
                                    <partial name="_CommentPartial" model="comment" />
                                }
                            </div>
                        }
                        <div id="comment" class="input-group">
                            <textarea id="message" class="form-control" name="message" placeholder="Add comment" rows="2"></textarea>
                            <div class="input-group-append">
                                <button onclick="Action()" class="btn btn-outline-secondary comment-edit-btns">Comment</button>
                            </div>
                        </div>
                        <span hidden class="small text-light">Message shoud be contains at least 2 symbols</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        function Like() {
            if ($('#like-btn').text() == "Like") {

                $.get('/likes/likepost/@Model.Id', (status) => {
                    $.get('/api/likes/@Model.Id', (likes) => {
                        $('#likes-count').text(likes);
                        $('#like-btn').text('Liked');
                    })
                });
            }
            else {
                $.get('/likes/unlikepost/@Model.Id', (status) => {
                    $.get('/api/likes/@Model.Id', (likes) => {
                        $('#likes-count').text(likes);
                        $('#like-btn').text('Like');
                    })
                });
            }
        }
    </script>

    <script>
        function Action() {
            if ($('.comment-edit-btns').text() == "Edit") {
                Edit();
            }
            else {
                Comment();
            }

        }

        function Comment() {
            var message = $('textarea').val();
            if (message.trim().length >= 2) {
                $('span').attr("hidden", true);
                $.get(`/comments/comment/@Model.Id?message=${message}`, (status) => {
                    $('textarea').val('');
                    $.get('/api/comments/@Model.Id', (comment) => {
                        $.get('/comments/commentscount/@Model.Id', (count) => {
                            if (count == 1) {

                                $('#no-comments').remove();

                                var divCommentSection = document.createElement('div');
                                divCommentSection.classList.add("comments-section");

                                $('.card-footer').prepend(divCommentSection);

                            }

                            var divParent = CreateComment(comment);

                            $('.comments-section').prepend(divParent);
                            $('#comments-count').text(count);
                        })

                    });
                });
            }
            else {
                $('span').removeAttr("hidden");
            }
        }

        function OnEdit(id) {

            var editBtns = document.querySelectorAll("button.edit, button.delete")
                .forEach(x => {
                    x.setAttribute("disabled", "disabled");
                });

            $('.comment-edit-btns').attr("comment-id", id);
            $('.comment-edit-btns').text("Edit");

            var divInputGr = document.createElement('div');
            divInputGr.id = "cancel";
            divInputGr.classList.add("input-group-append");

            var btnCancel = document.createElement("button");
            btnCancel.addEventListener("click", Cancel);
            btnCancel.classList.add("btn", "btn-outline-secondary", "cancel-btn");
            btnCancel.textContent = "X";

            divInputGr.appendChild(btnCancel)

            $("#comment").append(divInputGr);

            $.get(`/comments/getmessage/${id}`, (message) => {
                $("#message").val(message);
            })
        }

        function Edit() {
            var commentId = document.getElementsByClassName("comment-edit-btns")[0].getAttribute("comment-id");

            var message = $("#message").val();

            if (message.trim().length >= 2) {
                $.get(`/comments/edit/${commentId}?message=${message}`, (status) => {
                    document.querySelector(`[comment-message-id="${commentId}"]`).textContent = message;
                    $('span').attr("hidden", true);
                    Cancel();
                })
            }
            else {
                $('span').removeAttr("hidden");
            }


        }

        function Cancel() {
            $('#cancel').remove();
            $('.comment-edit-btns').removeAttr("comment-id");
            $('.comment-edit-btns').text("Comment");
            $("#message").val('');
            var editBtns = document.querySelectorAll("button.edit, button.delete").
                forEach(btn => {
                    btn.removeAttribute("disabled");
                });
        }

        function Delete(id) {

            var text = "Are you sure you want to delete this comment?";

            if (confirm(text)) {
                $.get(`/comments/delete/${id}`, (status) => {

                    var par = $(`[data-id="${id}"]`).parent().parent().parent().parent();

                    par.remove();

                    $.get('/comments/commentscount/@Model.Id', (count) => {
                        $('#comments-count').text(count);
                    });

                });
            }
        }

        function CreateComment(comment) {
            var divParent = document.createElement("div");
            divParent.classList.add("d-flex", "flex-start", "mb-4");

            var img = document.createElement("img");

            img.classList.add("rounded-circle", "shadow-1-strong", "me-3")
            img.setAttribute("src", Object.values(comment)[3]);
            img.setAttribute("alt", "avatar");
            img.setAttribute("width", "65");
            img.setAttribute("height", "65");


            var divClassW100 = document.createElement('div');
            divClassW100.classList.add("card", "w-100")

            var divClassCardBoyd = document.createElement("div");
            divClassCardBoyd.classList.add("card-body", "p-4");

            var div = document.createElement('div');

            var pUsername = document.createElement("p");
            pUsername.classList.add("small");
            pUsername.textContent = "User: " + Object.values(comment)[4];

            var pClassSmall = document.createElement('p');
            pClassSmall.classList.add("small");
            pClassSmall.textContent = "Posted on: " + Object.values(comment)[2];

            var id = Object.values(comment)[0];

            var pMessage = document.createElement("p");
            pMessage.setAttribute("comment-message-id", id);
            pMessage.textContent = Object.values(comment)[1];

            var divBtnsSection = document.createElement("div");
            divBtnsSection.classList.add("comment-btns-section");

            var editBtn = document.createElement("button");
            editBtn.classList.add("btn", "edit");
            editBtn.textContent = "Edit";
            editBtn.setAttribute("onclick", `OnEdit(${id})`);

            var deleteBtn = document.createElement("button");
            deleteBtn.classList.add("btn", "delete");
            deleteBtn.setAttribute("data-id", Object.values(comment)[0]);
            deleteBtn.textContent = "Delete";
            deleteBtn.setAttribute("onclick", `Delete(${id})`);

            div.appendChild(pUsername);
            div.appendChild(pClassSmall);
            div.appendChild(pMessage);

            divBtnsSection.appendChild(editBtn);
            divBtnsSection.appendChild(deleteBtn);

            divClassCardBoyd.appendChild(div);
            divClassCardBoyd.appendChild(divBtnsSection);

            divClassW100.appendChild(divClassCardBoyd);

            divParent.appendChild(img);
            divParent.appendChild(divClassW100);

            return divParent;
        }
    </script>
}